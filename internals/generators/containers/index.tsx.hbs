/**
 * {{ pascalCase name }}
 * {{ description }}
 */
import React from 'react'
import { observer } from 'mobx-react'
{{#if hasRoute}}
import { withRouter, RouteComponentProps } from 'react-router'
{{/if}}
import inject from 'utils/inject'
{{#if stores.length}}
  {{#each stores}}
import {{ this.name }} from '{{ this.modulePath }}'
  {{/each}}
{{/if}}
{{#if components}}
  {{#each components}}
import {{ this.name }} from '{{this.modulePath}}'
  {{/each}}
{{/if}}
{{#if i18n}}
import { FormattedMessage } from 'react-intl'
import messages from './messages'
{{/if}}
{{#if newStore}}
import {{ newStore }} from './stores/{{ newStore }}'
{{/if}}

// mobx 注入的props
interface InjectProps {
{{#if injectStores.length}}
  {{#each injectStores}}
  {{ this }}: {{ this }}
  {{/each}}
{{/if}}
}

// 容器自己的props
interface OwnProps{{#if hasRoute}} extends RouteComponentProps<{}>{{/if}} {
{{#if props.length}}
  {{#each props}}
  {{ camelCase this.name }}{{#if this.default}}?{{/if}}: {{ this.type }}
  {{/each}}
{{/if}}
  className?: string
}

type Props = InjectProps & OwnProps

@observer
class {{ pascalCase name }} extends React.Component<Props> {
  {{#if defaultProps.length }}
  public static defaultProps = {
    {{#each defaultProps }}
    {{this.name}}: {{{this.default}}},
    {{/each}}
  }
  {{/if}}
  public render() {
    return (
      <div className={this.props.className}>
        {{#if i18n}}
        <FormattedMessage {...messages.header} />
        {{else}}
        hello {{ pascalCase name }}
        {{/if}}
      </div>
    )
  }
}

{{#if injectStoreAndWithRouter }}
export default withRouter<OwnProps>(
  inject<OwnProps, Props>({{#each injectStores}}'{{this}}', {{/each}})({{ pascalCase name }})
)
{{else if injectStores.length }}
export default inject<OwnProps, Props>({{#each injectStores}}'{{this}}',{{/each}})({{ pascalCase name }})
{{else if hasRoute }}
export default withRouter<OwnProps>({{ pascalCase name }})
{{else}}
export default {{ pascalCase name }}
{{/if}}